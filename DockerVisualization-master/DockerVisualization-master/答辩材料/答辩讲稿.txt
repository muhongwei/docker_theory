选题背景：

问题1：环境搭建与部署是产品实际开发过程中的第一步，其操作过程极易产生错误。
比如：在不同配置的机器上搭建无差异化开发，测试环境难度高；
      产品研发环境和发布环境也往往不同，正式上线通常会遇到难以预料的问题
      项目开发每个人都要部署自己的开发环境，费时费力，且人为操作有不可避免的失误。

鉴于这些问题，目前大多数公司使用Docker进行环境部署。
Docker是近年来兴起的环境部署工具，因其可以实现可移植的应用部署而受到广大运维和开发的喜爱。

问题2：Docker只能运行在Linux环境中，需要记忆复杂的linux命令才能进行Docker相关的操作。
比如： 创建容器所需参数非常多，需要大量配置，对应的linux命令也相当复杂，不便记忆。

  
问题3：无信息可视化，不直观
想要查看不同主机的容器和镜像信息需要打开每一个主机进行查看，过程复杂。

本次项目开发主要用于解决这些问题。

目前国内也有一些Docker可视化管理系统，如：shipyard、DockerUI，但是多多少少有些功能不能满足公司内部需求。
且目前大多数项目属于私密开发，为提高公司内部信息安全，特此开发一款属于公司内部的Docker控制系统。


测试原则：
测试应用程序只能显示在应用程序中存在一个或多个缺陷，但是，仅仅通过测试并不能证明应用程序没有错误。
因此，设计测试用例使其尽可能多的找到缺陷是很重要的。本章根据需求说明中的功能尽可能的设计了完整的测试用例。
但是，除了受测试应用具有非常简单的逻辑结构和有限的输入，否则进行所有测试数据和场景的组合是不可能的事。
故在本章的测试中，针对某些过多输入的功能点只设计了典型的测试用例。
